cmake_minimum_required(VERSION 3.12.0)
project(MojoShader)

include(CheckIncludeFile)
check_include_file(d3d11.h HAS_D3D11_H)
check_include_file(vulkan/vulkan.h HAS_VULKAN_H)

option(BUILD_SHARED_LIBS "Build MojoShader as a shared library" ON)
option(BUILD_PROGRAMS "Build MojoShader binaries" ON)
option(PROFILE_D3D "Build MojoShader with support for the D3D profile" ON)
option(PROFILE_BYTECODE
       "Build MojoShader with support for the BYTECODE profile" ON)
option(PROFILE_HLSL "Build MojoShader with support for the HLSL profile"
       HAS_D3D11_H)
option(PROFILE_GLSL120 "Build MojoShader with support for the GLSL120 profile"
       ON)
option(PROFILE_GLSLES "Build MojoShader with support for the GLSLES profile" ON)
option(PROFILE_GLSL "Build MojoShader with support for the GLSL profile" ON)
option(PROFILE_ARB1 "Build MojoShader with support for the ARB1 profile" ON)
option(PROFILE_ARB1_NV "Build MojoShader with support for the ARB1_NV profile"
       ON)
option(PROFILE_METAL "Build MojoShader with support for the Metal profile"
       APPLE)
option(PROFILE_SPIRV "Build MojoShader with support for the SPIR-V profile"
       HAS_VULKAN_H)
option(PROFILE_GLSPIRV
       "Build MojoShader with support for the ARB_gl_spirv profile"
       HAS_VULKAN_H)
option(EFFECT_SUPPORT
       "Build MojoShader with support for Effect framework files" ON)
option(COMPILER_SUPPORT "Build MojoShader with support for HLSL source files"
       !WIN32) # TODO: Fix lemon on Windows
option(FLIP_VIEWPORT
       "Build MojoShader with the ability to flip the GL viewport" OFF)
option(DEPTH_CLIPPING
       "Build MojoShader with the ability to simulate [0, 1] depth clipping"
       OFF)
option(XNA4_VERTEXTEXTURE
       "Build MojoShader with XNA4 vertex texturing behavior" OFF)

# This was a Mercurial thing. In Git, it's always -1.
set(MOJOSHADER_VERSION -1)

# If Git is installed and we are in a git repository, include the changeset as
# version information.
find_program(GIT git DOC "Path to git command line app: https://git-scm.com/")
if(NOT GIT)
  message(
    STATUS "Git not found. You can go on, but version info will be wrong.")
  set(MOJOSHADER_CHANGESET "???")
else(NOT GIT)
  mark_as_advanced(GIT)

  # !!! FIXME: this didn't actually use the GIT variable...

  # See if we are in a git repository.
  execute_process(
    COMMAND git rev-parse --show-toplevel
    WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
    OUTPUT_VARIABLE MOJOSHADER_GIT_TOPLEVEL_DIR
    RESULT_VARIABLE GITVERSION_RC
    ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)
  if(NOT GITVERSION_RC EQUAL 0)
    message(
      STATUS
        "Git repository not found. You can go on, but version info will be wrong."
    )
    set(MOJOSHADER_CHANGESET "???")
  else(NOT GITVERSION_RC EQUAL 0)
    # Query the changeset.
    execute_process(
      COMMAND git rev-list HEAD~..
      WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
      RESULT_VARIABLE GITVERSION_RC
      OUTPUT_VARIABLE MOJOSHADER_GIT_CHANGESET
      ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE)
    if(NOT GITVERSION_RC EQUAL 0)
      set(MOJOSHADER_CHANGESET "???")
    else(NOT GITVERSION_RC EQUAL 0)
      set(MOJOSHADER_CHANGESET "git-${MOJOSHADER_GIT_CHANGESET}")
    endif(NOT GITVERSION_RC EQUAL 0)
  endif(NOT GITVERSION_RC EQUAL 0)
endif(NOT GIT)

write_file(
  "${CMAKE_CURRENT_SOURCE_DIR}/mojoshader_version.h"
  "/* This file was autogenerated. Do not edit! */\n"
  "#ifndef _INCL_MOJOSHADER_VERSION_H_\n"
  "#define _INCL_MOJOSHADER_VERSION_H_\n"
  "#define MOJOSHADER_VERSION ${MOJOSHADER_VERSION}\n"
  "#define MOJOSHADER_CHANGESET \"${MOJOSHADER_CHANGESET}\"\n"
  "#endif\n")

if(CMAKE_COMPILER_IS_GNUCC)
  add_definitions(-Wall -ggdb3)
endif(CMAKE_COMPILER_IS_GNUCC)

# testparse uses this when I'm looking at memory usage patterns.
# ADD_DEFINITIONS(-DMOJOSHADER_DEBUG_MALLOC=1)

if(MSVC)
  add_definitions(-D_CRT_SECURE_NO_WARNINGS=1)
  add_definitions(-TP) # force .c files to compile as C++.
endif(MSVC)

# We build lemon, then use it to generate parser C code.
if(COMPILER_SUPPORT)
  add_executable(lemon "misc/lemon.c")
  add_custom_command(
    OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/mojoshader_parser_hlsl.h"
    MAIN_DEPENDENCY "${CMAKE_CURRENT_SOURCE_DIR}/mojoshader_parser_hlsl.lemon"
    DEPENDS lemon "${CMAKE_CURRENT_SOURCE_DIR}/misc/lempar.c"
    COMMAND lemon ARGS -q "-T${CMAKE_CURRENT_SOURCE_DIR}/misc/lempar.c"
            "${CMAKE_CURRENT_SOURCE_DIR}/mojoshader_parser_hlsl.lemon")
endif(COMPILER_SUPPORT)

if(APPLE)
  if(NOT IOS)
    find_library(CARBON_FRAMEWORK Carbon) # Stupid Gestalt.
  endif(NOT IOS)
endif(APPLE)

add_library(
  mojoshader
  mojoshader.c
  mojoshader_common.c
  mojoshader_opengl.c
  mojoshader_metal.c
  mojoshader_d3d11.c
  mojoshader_vulkan.c
  profiles/mojoshader_profile_arb1.c
  profiles/mojoshader_profile_bytecode.c
  profiles/mojoshader_profile_d3d.c
  profiles/mojoshader_profile_hlsl.c
  profiles/mojoshader_profile_glsl.c
  profiles/mojoshader_profile_metal.c
  profiles/mojoshader_profile_spirv.c
  profiles/mojoshader_profile_common.c)
if(EFFECT_SUPPORT)
  target_sources(mojoshader PRIVATE mojoshader_effects.c)
endif(EFFECT_SUPPORT)
if(COMPILER_SUPPORT)
  target_sources(
    mojoshader PRIVATE mojoshader_compiler.c mojoshader_preprocessor.c
                       mojoshader_lexer.c mojoshader_assembler.c)
endif(COMPILER_SUPPORT)
if(BUILD_SHARED_LIBS)
  target_link_libraries(mojoshader ${LIBM} ${LOBJC} ${CARBON_FRAMEWORK})
endif(BUILD_SHARED_LIBS)

if(NOT PROFILE_D3D)
  target_compile_definitions(mojoshader PRIVATE -DSUPPORT_PROFILE_D3D=0)
endif(NOT PROFILE_D3D)
if(NOT PROFILE_BYTECODE)
  target_compile_definitions(mojoshader PRIVATE -DSUPPORT_PROFILE_BYTECODE=0)
endif(NOT PROFILE_BYTECODE)
if(NOT PROFILE_HLSL)
  target_compile_definitions(mojoshader PRIVATE -DSUPPORT_PROFILE_HLSL=0)
endif(NOT PROFILE_HLSL)
if(NOT PROFILE_GLSL120)
  target_compile_definitions(mojoshader PRIVATE -DSUPPORT_PROFILE_GLSL120=0)
endif(NOT PROFILE_GLSL120)
if(NOT PROFILE_GLSLES)
  target_compile_definitions(mojoshader PRIVATE -DSUPPORT_PROFILE_GLSLES=0)
endif(NOT PROFILE_GLSLES)
if(NOT PROFILE_GLSL)
  target_compile_definitions(mojoshader PRIVATE -DSUPPORT_PROFILE_GLSL=0)
endif(NOT PROFILE_GLSL)
if(NOT PROFILE_ARB1)
  target_compile_definitions(mojoshader PRIVATE -DSUPPORT_PROFILE_ARB1=0)
endif(NOT PROFILE_ARB1)
if(NOT PROFILE_ARB1_NV)
  target_compile_definitions(mojoshader PRIVATE -DSUPPORT_PROFILE_ARB1_NV=0)
endif(NOT PROFILE_ARB1_NV)
if(NOT PROFILE_METAL)
  target_compile_definitions(mojoshader PRIVATE -DSUPPORT_PROFILE_METAL=0)
else(NOT PROFILE_METAL)
  set(LOBJC -lobjc)
endif(NOT PROFILE_METAL)
if(NOT PROFILE_SPIRV)
  target_compile_definitions(mojoshader PRIVATE -DSUPPORT_PROFILE_SPIRV=0)
endif(NOT PROFILE_SPIRV)
if(NOT PROFILE_GLSPIRV)
  target_compile_definitions(mojoshader PRIVATE -DSUPPORT_PROFILE_GLSPIRV=0)
endif(NOT PROFILE_GLSPIRV)

if(EFFECT_SUPPORT)
  if(UNIX)
    set(LIBM -lm)
  endif(UNIX)
  target_compile_definitions(mojoshader PUBLIC -DMOJOSHADER_EFFECT_SUPPORT)
endif(EFFECT_SUPPORT)

if(FLIP_VIEWPORT)
  target_compile_definitions(mojoshader PUBLIC -DMOJOSHADER_FLIP_RENDERTARGET)
endif(FLIP_VIEWPORT)

if(DEPTH_CLIPPING)
  target_compile_definitions(mojoshader PUBLIC -DMOJOSHADER_DEPTH_CLIPPING)
endif(DEPTH_CLIPPING)

if(XNA4_VERTEXTEXTURE)
  target_compile_definitions(mojoshader
                             PUBLIC -DMOJOSHADER_XNA4_VERTEX_TEXTURES)
endif(XNA4_VERTEXTEXTURE)

# These are fallback paths for Vulkan/D3D11, try to have this on the system
# instead!
target_include_directories(
  mojoshader
  PUBLIC
    ${CMAKE_CURRENT_SOURCE_DIR}
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../Vulkan-Headers/include>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../dxvk-native/include/native/directx>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../dxvk-native/include/native/windows>
    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/../dxvk-native/include/native/wsi>
)

set_source_files_properties(
  mojoshader_compiler.c
  PROPERTIES OBJECT_DEPENDS
             "${CMAKE_CURRENT_SOURCE_DIR}/mojoshader_parser_hlsl.h")

find_program(RE2C re2c DOC "Path to re2c command line app: http://re2c.org/")
if(NOT RE2C)
  message(STATUS "re2c missing. You can go on, but can't rebuild the lexer.")
else(NOT RE2C)
  mark_as_advanced(RE2C)
  add_custom_command(
    OUTPUT "${CMAKE_CURRENT_SOURCE_DIR}/mojoshader_lexer.c"
    DEPENDS mojoshader_lexer.re
    COMMAND
      "${RE2C}" ARGS -is --no-generation-date -o
      "${CMAKE_CURRENT_SOURCE_DIR}/mojoshader_lexer.c"
      "${CMAKE_CURRENT_SOURCE_DIR}/mojoshader_lexer.re")
endif(NOT RE2C)

if(BUILD_PROGRAMS)
  find_package(SDL2)
  if(SDL2_FOUND)
    add_executable(glcaps utils/glcaps.c)
    target_include_directories(glcaps PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
    target_link_libraries(glcaps ${SDL2_LIBRARIES} ${LIBM} ${LOBJC} ${CARBON_FRAMEWORK})
    add_executable(bestprofile utils/bestprofile.c)
    target_link_libraries(bestprofile mojoshader ${SDL2_LIBRARIES} ${LIBM} ${LOBJC} ${CARBON_FRAMEWORK})
    add_executable(availableprofiles utils/availableprofiles.c)
    target_link_libraries(availableprofiles mojoshader ${SDL2_LIBRARIES} ${LIBM} ${LOBJC} ${CARBON_FRAMEWORK})
    add_executable(testglcompile utils/testglcompile.c)
    target_link_libraries(testglcompile mojoshader ${SDL2_LIBRARIES} ${LIBM} ${LOBJC} ${CARBON_FRAMEWORK})
  endif(SDL2_FOUND)

  if(COMPILER_SUPPORT)
    add_executable(finderrors utils/finderrors.c)
    if(SDL2_FOUND)
      target_link_libraries(finderrors mojoshader ${SDL2_LIBRARIES} ${LIBM} ${LOBJC}
                            ${CARBON_FRAMEWORK})
      set_source_files_properties(
        utils/finderrors.c PROPERTIES COMPILE_FLAGS
                                      "-DFINDERRORS_COMPILE_SHADERS=1")
    else(SDL2_FOUND)
      target_link_libraries(finderrors mojoshader ${LIBM} ${LOBJC}
                            ${CARBON_FRAMEWORK})
    endif(SDL2_FOUND)
  endif(COMPILER_SUPPORT)

  find_path(SPIRV_TOOLS_INCLUDE_DIR "spirv-tools/libspirv.h"
            PATH_SUFFIXES "include")
  find_library(SPIRV_TOOLS_LIBRARY NAMES SPIRV-Tools-shared)
  if(SPIRV_TOOLS_INCLUDE_DIR AND SPIRV_TOOLS_LIBRARY)
    target_include_directories(mojoshader PUBLIC ${SPIRV_TOOLS_INCLUDE_DIR})
    target_compile_definitions(mojoshader PUBLIC -DMOJOSHADER_HAS_SPIRV_TOOLS)
  endif(SPIRV_TOOLS_INCLUDE_DIR AND SPIRV_TOOLS_LIBRARY)

  add_executable(testparse utils/testparse.c)
  target_link_libraries(testparse mojoshader ${LIBM} ${LOBJC}
                        ${CARBON_FRAMEWORK})
  if(SPIRV_TOOLS_INCLUDE_DIR AND SPIRV_TOOLS_LIBRARY)
    target_link_libraries(testparse ${SPIRV_TOOLS_LIBRARY})
  endif(SPIRV_TOOLS_INCLUDE_DIR AND SPIRV_TOOLS_LIBRARY)
  add_executable(testoutput utils/testoutput.c)
  target_link_libraries(testoutput mojoshader ${LIBM} ${LOBJC}
                        ${CARBON_FRAMEWORK})
  if(COMPILER_SUPPORT)
    add_executable(mojoshader-compiler utils/mojoshader-compiler.c)
    target_link_libraries(mojoshader-compiler mojoshader ${LIBM} ${LOBJC}
                          ${CARBON_FRAMEWORK})
  endif(COMPILER_SUPPORT)

  # Unit tests...
  if(COMPILER_SUPPORT)
    add_custom_target(
      test
      COMMAND "${CMAKE_CURRENT_SOURCE_DIR}/unit_tests/run_tests.pl"
      WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
      DEPENDS mojoshader-compiler
      COMMENT "Running unit tests..."
      VERBATIM)
  endif(COMPILER_SUPPORT)
endif(BUILD_PROGRAMS)
# End of CMakeLists.txt ...
